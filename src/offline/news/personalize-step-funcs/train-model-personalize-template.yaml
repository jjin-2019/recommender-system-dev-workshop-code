AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    (SO8010)

    CloudFormation for RecSys StepFuncs


Parameters:
  Stage:
    Type: String
    Default: dev

  StepFuncAndLambdaRoleName:
    Type: String
    Default: LambdaAndStepFuncsRole

  PreCheckLabmda:
    Type: String
    Default: PreCheckLabmda

  CreateDatasetImportJobLambda:
    Type: String
    Default: CreateDatasetImportJobLambda

  UpdateSolutionVersionLambda:
    Type: String
    Default: UpdateSolutionVersionLambda

  UpdateCampaignLambda:
    Type: String
    Default: UpdateCampaignLambda

  CheckDatasetImportJobStatusLambda:
    Type: String
    Default: CheckDatasetImportJobStatusLambda

  CheckSolutionVersionStatusLambda:
    Type: String
    Default: CheckSolutionVersionStatusLambda

  CheckCampaignStatusLambda:
    Type: String
    Default: CheckCampaignStatusLambda

Resources:
  TrainModelStepFuncPersonalize:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/rs-${Stage}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub rs-${Stage}-News-TrainModelStepFunc-Personalize
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "TimeoutSeconds": 36000,
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/personalize-data/personalize_interactions.csv"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Create Interaction Dataset Import Job"
            },
            "Create Interaction Dataset Import Job": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${CreateDatasetImportJobLambda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "datasetGroupName.$": "$.DatasetGroupName",
                  "datasetName.$": "$.DatasetName",
                  "fileName.$": "$.FileName"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.CreateInteractionDatasetImportJob",
              "Next": "Wait 30 Seconds For Dataset Import Job"
            },
            "Wait 30 Seconds For Dataset Import Job": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "Check Interaction Dataset Import Job Status"
            },
            "Check Interaction User Dataset Import Job Status": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${CheckDatasetImportJobStatusLambda}",
                "Payload": {
                  "createDatasetImportJob.$": "$.CreateInteractionDatasetImportJob"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.CheckInteractionDatsetImportJobStatus",
              "Next": "Interaction Dataset Import Job Status Choice"
            },
            "Interaction Dataset Import Job Status Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Or": [
                    {
                      "Variable": "$.CheckInteractionDatsetImportJobStatus.body.dataset_import_job_status",
                      "StringEquals": "CREATE PENDING"
                    },
                    {
                      "Variable": "$.CheckInteractionDatsetImportJobStatus.body.dataset_import_job_status",
                      "StringEquals": "CREATE IN_PROGRESS"
                    }
                  ],
                  "Next": "Wait 30 Seconds For Dataset Import Job"
                },
                {
                  "Variable": "$.CheckInteractionDatsetImportJobStatus.body.dataset_import_job_status",
                  "StringEquals": "ACTIVE",
                  "Next": "Update Solution Version"
                },
                {
                  "Variable": "$.CheckInteractionDatsetImportJobStatus.body.dataset_import_job_status",
                  "StringEquals": "CREATE FAILED",
                  "Next": "Fail"
                }
              ],
              "Default": "Fail"
            },
            "Update Solution Version": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${UpdateSolutionVersionLambda}",
                "Payload": {
                  "datasetGroupName.$": "$.DatasetGroupName",
                  "solutionName.$": "$.SolutionName",
                  "trainingMode.$": "$.TrainingMode"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.UpdateSolutionVersion",
              "Next": "Wait 1 min for updating solution version"
            },
            "Wait 1 min for updating solution version": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "Check Solution Version Status"
            },
            "Check Solution Version Status": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${CheckSolutionVersionStatusLambda}",
                "Payload": {
                  "updateSolutionVersion.$": "$.UpdateSolutionVersion"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.CheckSolutionVersionStatus",
              "Next": "Solution Version Status Choice"
            },
            "Solution Version Status Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Or": [
                    {
                      "Variable": "$.CheckSolutionVersionStatus.body.solution_version_status",
                      "StringEquals": "CREATE PENDING"
                    },
                    {
                      "Variable": "$.CheckSolutionVersionStatus.body.solution_version_status",
                      "StringEquals": "CREATE IN_PROGRESS"
                    }
                  ],
                  "Next": "Wait 1 min for updating solution version"
                },
                {
                  "Variable": "$.CheckSolutionVersionStatus.body.solution_version_status",
                  "StringEquals": "ACTIVE",
                  "Next": "Update Campaign"
                },
                {
                  "Variable": "$.CheckSolutionVersionStatus.body.solution_version_status",
                  "StringEquals": "CREATE FAILED",
                  "Next": "Fail"
                }
              ],
              "Default": "Fail"
            },
            "Update Campaign": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${UpdateCampaignLambda}",
                "Payload": {
                  "datasetGroupName.$": "$.DatasetGroupName",
                  "solutionName.$": "$.SolutionName",
                  "trainingMode.$": "$.TrainingMode",
                  "updateSolutionVersion.$": "$.UpdateSolutionVersion"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.UpdateCampaign",
              "Next": "Wait 1 min for updating campaign"
            },
            "Wait 1 min for updating campaign": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "Check Campaign Status"
            },
            "Check Campaign Status": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "rs-${Stage}-${CheckCampaignStatusLambda}",
                "Payload": {
                  "updateCampaign.$": "$.UpdateCampaign"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.CheckCampaignStatus",
              "Next": "Campaign Status Choice"
            },
            "Campaign Status Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Or": [
                    {
                      "Variable": "$.CheckCampaignStatus.body.campaign_status",
                      "StringEquals": "CREATE PENDING"
                    },
                    {
                      "Variable": "$.CheckCampaignStatus.body.campaign_status",
                      "StringEquals": "CREATE IN_PROGRESS"
                    }
                  ],
                  "Next": "Wait 1 min for updating campaign"
                },
                {
                  "Variable": "$.CheckCampaignStatus.body.campaign_status",
                  "StringEquals": "ACTIVE",
                  "Next": "Succeed"
                },
                {
                  "Variable": "$.CheckCampaignStatus.body.campaign_status",
                  "StringEquals": "CREATE FAILED",
                  "Next": "Fail"
                }
              ],
              "Default": "Fail"
            },
            "Fail": {
              "Type": "Fail",
              "Error": "Train Model Failed"
            },
            "Succeed": {
              "Type": "Succeed"
            }
          }
        }

